name: Manual Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment (dev, test, prod)'
        required: true
        default: 'dev'
      release:
        description: 'Release to deploy (e.g., v1.0.0)'
        required: true

env:
  ASSET_NAME: salesforce-package

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Fetch Release Asset URL
        id: fetch_asset
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const releaseName = '${{ github.event.inputs.release }}';
            const environment = '${{ github.event.inputs.environment }}';
            const assetName = '${{ env.ASSET_NAME }}-' + environment + '.zip';

            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });

            const release = releases.data.find(r => r.tag_name === releaseName);
            if (!release) {
              console.log('Available Releases:');
              releases.data.forEach(r => console.log(`- ${r.tag_name}`));
              throw new Error(`Release with tag "${releaseName}" not found.`);
            }

            console.log(`Found Release: ${release.tag_name}`);

            const asset = release.assets.find(a => a.name === assetName);
            if (!asset) {
              console.log('Available Assets in Release:');
              release.assets.forEach(a => console.log(`- ${a.name}`));
              throw new Error(`No asset found with name "${assetName}" in release "${releaseName}".`);
            }

            console.log(`Found Asset: ${asset.name}`);
            console.log(`Asset URL: ${asset.browser_download_url}`);
            return asset.browser_download_url;

      - name: Debug Asset URL
        run: |
          echo "Asset URL: ${{ steps.fetch_asset.outputs.result }}"
          curl -I ${{ steps.fetch_asset.outputs.result }}

      - name: Download Release Asset
        run: |
          echo "Downloading asset..."
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -o ${{ env.ASSET_NAME }}-${{ github.event.inputs.environment }}.zip \
            ${{ steps.fetch_asset.outputs.result }}

          echo "Validating downloaded file..."
          if [ ! -s ${{ env.ASSET_NAME }}-${{ github.event.inputs.environment }}.zip ]; then
            echo "Error: Downloaded file is empty or missing."
            exit 1
          fi

          echo "Inspecting file content..."
          file ${{ env.ASSET_NAME }}-${{ github.event.inputs.environment }}.zip
          echo "Contents of the downloaded file:"
          cat ${{ env.ASSET_NAME }}-${{ github.event.inputs.environment }}.zip

          echo "Checking ZIP integrity..."
          if ! unzip -tq ${{ env.ASSET_NAME }}-${{ github.event.inputs.environment }}.zip; then
            echo "Error: The downloaded file is not a valid ZIP archive."
            exit 1
          fi

          echo "Unzipping asset..."
          mkdir -p deployment
          unzip ${{ env.ASSET_NAME }}-${{ github.event.inputs.environment }}.zip -d deployment
          ls -la deployment

      - name: Deploy to ${{ github.event.inputs.environment }}
        run: |
          echo "Deploying release ${{ github.event.inputs.release }} to ${{ github.event.inputs.environment }} environment..."
          cat deployment/config.yaml
          echo "Deployment successful for ${{ github.event.inputs.environment }} using release ${{ github.event.inputs.release }}!"
